//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Plantilla.Datos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProntuarioDigitalEntities : DbContext
    {
        public ProntuarioDigitalEntities()
            : base("name=ProntuarioDigitalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Authors> Authors { get; set; }
        public virtual DbSet<AuthorXBook> AuthorXBook { get; set; }
        public virtual DbSet<Books> Books { get; set; }
        public virtual DbSet<CertifyingBody> CertifyingBody { get; set; }
        public virtual DbSet<CollegeDegreeDocuments> CollegeDegreeDocuments { get; set; }
        public virtual DbSet<CollegeDegreeTypes> CollegeDegreeTypes { get; set; }
        public virtual DbSet<Countries> Countries { get; set; }
        public virtual DbSet<Editorial> Editorial { get; set; }
        public virtual DbSet<Files> Files { get; set; }
        public virtual DbSet<GenericDocument> GenericDocument { get; set; }
        public virtual DbSet<Institutions> Institutions { get; set; }
        public virtual DbSet<LanguageKnowledgeDocuments> LanguageKnowledgeDocuments { get; set; }
        public virtual DbSet<LanguageKnowledgeLevels> LanguageKnowledgeLevels { get; set; }
        public virtual DbSet<Languages> Languages { get; set; }
        public virtual DbSet<Magazines> Magazines { get; set; }
        public virtual DbSet<MagazinesArticles> MagazinesArticles { get; set; }
        public virtual DbSet<Presentations> Presentations { get; set; }
        public virtual DbSet<Regulations> Regulations { get; set; }
        public virtual DbSet<ResearchProject> ResearchProject { get; set; }
        public virtual DbSet<Tips> Tips { get; set; }
        public virtual DbSet<Training> Training { get; set; }
        public virtual DbSet<TrainingEntities> TrainingEntities { get; set; }
        public virtual DbSet<AuthorXArticle> AuthorXArticle { get; set; }
    
        public virtual ObjectResult<string> usp_AuthorsByArticle(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_AuthorsByArticle", idParameter);
        }
    
        public virtual int usp_AuthorsDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AuthorsDelete", idParameter);
        }
    
        public virtual int usp_AuthorsExists(string name, string email)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AuthorsExists", nameParameter, emailParameter);
        }
    
        public virtual ObjectResult<usp_AuthorsInsert_Result> usp_AuthorsInsert(string name, string email)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuthorsInsert_Result>("usp_AuthorsInsert", nameParameter, emailParameter);
        }
    
        public virtual ObjectResult<usp_AuthorsSelect_Result> usp_AuthorsSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuthorsSelect_Result>("usp_AuthorsSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_AuthorsUpdate_Result> usp_AuthorsUpdate(Nullable<int> id, string name, string email)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuthorsUpdate_Result>("usp_AuthorsUpdate", idParameter, nameParameter, emailParameter);
        }
    
        public virtual int usp_AuthorXArticleDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AuthorXArticleDelete", idParameter);
        }
    
        public virtual ObjectResult<usp_AuthorXArticleInsert_Result> usp_AuthorXArticleInsert(Nullable<int> authorId, Nullable<int> articleId)
        {
            var authorIdParameter = authorId.HasValue ?
                new ObjectParameter("AuthorId", authorId) :
                new ObjectParameter("AuthorId", typeof(int));
    
            var articleIdParameter = articleId.HasValue ?
                new ObjectParameter("ArticleId", articleId) :
                new ObjectParameter("ArticleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuthorXArticleInsert_Result>("usp_AuthorXArticleInsert", authorIdParameter, articleIdParameter);
        }
    
        public virtual ObjectResult<usp_AuthorXArticleSelect_Result> usp_AuthorXArticleSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuthorXArticleSelect_Result>("usp_AuthorXArticleSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_AuthorXArticleUpdate_Result> usp_AuthorXArticleUpdate(Nullable<int> id, Nullable<int> authorId, Nullable<int> articleId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var authorIdParameter = authorId.HasValue ?
                new ObjectParameter("AuthorId", authorId) :
                new ObjectParameter("AuthorId", typeof(int));
    
            var articleIdParameter = articleId.HasValue ?
                new ObjectParameter("ArticleId", articleId) :
                new ObjectParameter("ArticleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuthorXArticleUpdate_Result>("usp_AuthorXArticleUpdate", idParameter, authorIdParameter, articleIdParameter);
        }
    
        public virtual int usp_AuthorXBookDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AuthorXBookDelete", idParameter);
        }
    
        public virtual ObjectResult<usp_AuthorXBookInsert_Result> usp_AuthorXBookInsert(Nullable<int> authorId, Nullable<int> bookId)
        {
            var authorIdParameter = authorId.HasValue ?
                new ObjectParameter("AuthorId", authorId) :
                new ObjectParameter("AuthorId", typeof(int));
    
            var bookIdParameter = bookId.HasValue ?
                new ObjectParameter("BookId", bookId) :
                new ObjectParameter("BookId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuthorXBookInsert_Result>("usp_AuthorXBookInsert", authorIdParameter, bookIdParameter);
        }
    
        public virtual ObjectResult<usp_AuthorXBookSelect_Result> usp_AuthorXBookSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuthorXBookSelect_Result>("usp_AuthorXBookSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_AuthorXBookUpdate_Result> usp_AuthorXBookUpdate(Nullable<int> id, Nullable<int> authorId, Nullable<int> bookId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var authorIdParameter = authorId.HasValue ?
                new ObjectParameter("AuthorId", authorId) :
                new ObjectParameter("AuthorId", typeof(int));
    
            var bookIdParameter = bookId.HasValue ?
                new ObjectParameter("BookId", bookId) :
                new ObjectParameter("BookId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuthorXBookUpdate_Result>("usp_AuthorXBookUpdate", idParameter, authorIdParameter, bookIdParameter);
        }
    
        public virtual int usp_BooksDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_BooksDelete", idParameter);
        }
    
        public virtual int usp_BooksInsert(Nullable<int> genericDocumentId, string bookName, string country, string editorialName, Nullable<System.DateTime> publicationDate, string publicationURL, string authors)
        {
            var genericDocumentIdParameter = genericDocumentId.HasValue ?
                new ObjectParameter("GenericDocumentId", genericDocumentId) :
                new ObjectParameter("GenericDocumentId", typeof(int));
    
            var bookNameParameter = bookName != null ?
                new ObjectParameter("BookName", bookName) :
                new ObjectParameter("BookName", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var editorialNameParameter = editorialName != null ?
                new ObjectParameter("EditorialName", editorialName) :
                new ObjectParameter("EditorialName", typeof(string));
    
            var publicationDateParameter = publicationDate.HasValue ?
                new ObjectParameter("PublicationDate", publicationDate) :
                new ObjectParameter("PublicationDate", typeof(System.DateTime));
    
            var publicationURLParameter = publicationURL != null ?
                new ObjectParameter("PublicationURL", publicationURL) :
                new ObjectParameter("PublicationURL", typeof(string));
    
            var authorsParameter = authors != null ?
                new ObjectParameter("Authors", authors) :
                new ObjectParameter("Authors", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_BooksInsert", genericDocumentIdParameter, bookNameParameter, countryParameter, editorialNameParameter, publicationDateParameter, publicationURLParameter, authorsParameter);
        }
    
        public virtual ObjectResult<usp_BooksSelect_Result> usp_BooksSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BooksSelect_Result>("usp_BooksSelect", idParameter);
        }
    
        public virtual int usp_BooksUpdate(Nullable<int> id, Nullable<int> genericDocumentId, string bookName, string country, string editorialName, Nullable<System.DateTime> publicationDate, string publicationURL, string authors)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var genericDocumentIdParameter = genericDocumentId.HasValue ?
                new ObjectParameter("GenericDocumentId", genericDocumentId) :
                new ObjectParameter("GenericDocumentId", typeof(int));
    
            var bookNameParameter = bookName != null ?
                new ObjectParameter("BookName", bookName) :
                new ObjectParameter("BookName", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var editorialNameParameter = editorialName != null ?
                new ObjectParameter("EditorialName", editorialName) :
                new ObjectParameter("EditorialName", typeof(string));
    
            var publicationDateParameter = publicationDate.HasValue ?
                new ObjectParameter("PublicationDate", publicationDate) :
                new ObjectParameter("PublicationDate", typeof(System.DateTime));
    
            var publicationURLParameter = publicationURL != null ?
                new ObjectParameter("PublicationURL", publicationURL) :
                new ObjectParameter("PublicationURL", typeof(string));
    
            var authorsParameter = authors != null ?
                new ObjectParameter("Authors", authors) :
                new ObjectParameter("Authors", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_BooksUpdate", idParameter, genericDocumentIdParameter, bookNameParameter, countryParameter, editorialNameParameter, publicationDateParameter, publicationURLParameter, authorsParameter);
        }
    
        public virtual int usp_CertifyingBodyDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CertifyingBodyDelete", idParameter);
        }
    
        public virtual int usp_CertifyingBodyExists(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CertifyingBodyExists", nameParameter);
        }
    
        public virtual ObjectResult<usp_CertifyingBodyGet_Result> usp_CertifyingBodyGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CertifyingBodyGet_Result>("usp_CertifyingBodyGet");
        }
    
        public virtual ObjectResult<usp_CertifyingBodyInsert_Result> usp_CertifyingBodyInsert(string name, Nullable<bool> isUserDefined)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isUserDefinedParameter = isUserDefined.HasValue ?
                new ObjectParameter("IsUserDefined", isUserDefined) :
                new ObjectParameter("IsUserDefined", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CertifyingBodyInsert_Result>("usp_CertifyingBodyInsert", nameParameter, isUserDefinedParameter);
        }
    
        public virtual ObjectResult<usp_CertifyingBodySelect_Result> usp_CertifyingBodySelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CertifyingBodySelect_Result>("usp_CertifyingBodySelect", idParameter);
        }
    
        public virtual ObjectResult<usp_CertifyingBodyUpdate_Result> usp_CertifyingBodyUpdate(Nullable<int> id, string name, Nullable<bool> isUserDefined)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isUserDefinedParameter = isUserDefined.HasValue ?
                new ObjectParameter("IsUserDefined", isUserDefined) :
                new ObjectParameter("IsUserDefined", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CertifyingBodyUpdate_Result>("usp_CertifyingBodyUpdate", idParameter, nameParameter, isUserDefinedParameter);
        }
    
        public virtual int usp_CollegeDegreeDocumentsDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CollegeDegreeDocumentsDelete", idParameter);
        }
    
        public virtual int usp_CollegeDegreeDocumentsInsert(Nullable<int> genericDocumentId, Nullable<int> collegeDegreeType, Nullable<int> year, string institution, string country)
        {
            var genericDocumentIdParameter = genericDocumentId.HasValue ?
                new ObjectParameter("GenericDocumentId", genericDocumentId) :
                new ObjectParameter("GenericDocumentId", typeof(int));
    
            var collegeDegreeTypeParameter = collegeDegreeType.HasValue ?
                new ObjectParameter("CollegeDegreeType", collegeDegreeType) :
                new ObjectParameter("CollegeDegreeType", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var institutionParameter = institution != null ?
                new ObjectParameter("Institution", institution) :
                new ObjectParameter("Institution", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CollegeDegreeDocumentsInsert", genericDocumentIdParameter, collegeDegreeTypeParameter, yearParameter, institutionParameter, countryParameter);
        }
    
        public virtual ObjectResult<usp_CollegeDegreeDocumentsSelect_Result> usp_CollegeDegreeDocumentsSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CollegeDegreeDocumentsSelect_Result>("usp_CollegeDegreeDocumentsSelect", idParameter);
        }
    
        public virtual int usp_CollegeDegreeDocumentsUpdate(Nullable<int> id, Nullable<int> genericDocumentId, Nullable<int> collegeDegreeType, Nullable<int> year, string institution, string country)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var genericDocumentIdParameter = genericDocumentId.HasValue ?
                new ObjectParameter("GenericDocumentId", genericDocumentId) :
                new ObjectParameter("GenericDocumentId", typeof(int));
    
            var collegeDegreeTypeParameter = collegeDegreeType.HasValue ?
                new ObjectParameter("CollegeDegreeType", collegeDegreeType) :
                new ObjectParameter("CollegeDegreeType", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var institutionParameter = institution != null ?
                new ObjectParameter("Institution", institution) :
                new ObjectParameter("Institution", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CollegeDegreeDocumentsUpdate", idParameter, genericDocumentIdParameter, collegeDegreeTypeParameter, yearParameter, institutionParameter, countryParameter);
        }
    
        public virtual int usp_CollegeDegreeTypesDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CollegeDegreeTypesDelete", idParameter);
        }
    
        public virtual int usp_CollegeDegreeTypesExists(string description)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CollegeDegreeTypesExists", descriptionParameter);
        }
    
        public virtual ObjectResult<usp_CollegeDegreeTypesGet_Result> usp_CollegeDegreeTypesGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CollegeDegreeTypesGet_Result>("usp_CollegeDegreeTypesGet");
        }
    
        public virtual ObjectResult<usp_CollegeDegreeTypesInsert_Result> usp_CollegeDegreeTypesInsert(string description, Nullable<bool> isUserDefined)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isUserDefinedParameter = isUserDefined.HasValue ?
                new ObjectParameter("IsUserDefined", isUserDefined) :
                new ObjectParameter("IsUserDefined", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CollegeDegreeTypesInsert_Result>("usp_CollegeDegreeTypesInsert", descriptionParameter, isUserDefinedParameter);
        }
    
        public virtual ObjectResult<usp_CollegeDegreeTypesSelect_Result> usp_CollegeDegreeTypesSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CollegeDegreeTypesSelect_Result>("usp_CollegeDegreeTypesSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_CollegeDegreeTypesUpdate_Result> usp_CollegeDegreeTypesUpdate(Nullable<int> id, string description, Nullable<bool> isUserDefined)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isUserDefinedParameter = isUserDefined.HasValue ?
                new ObjectParameter("IsUserDefined", isUserDefined) :
                new ObjectParameter("IsUserDefined", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CollegeDegreeTypesUpdate_Result>("usp_CollegeDegreeTypesUpdate", idParameter, descriptionParameter, isUserDefinedParameter);
        }
    
        public virtual int usp_CountriesDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CountriesDelete", idParameter);
        }
    
        public virtual int usp_CountriesExists(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CountriesExists", nameParameter);
        }
    
        public virtual ObjectResult<usp_CountriesGet_Result> usp_CountriesGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CountriesGet_Result>("usp_CountriesGet");
        }
    
        public virtual ObjectResult<usp_CountriesInsert_Result> usp_CountriesInsert(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CountriesInsert_Result>("usp_CountriesInsert", nameParameter);
        }
    
        public virtual ObjectResult<usp_CountriesSelect_Result> usp_CountriesSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CountriesSelect_Result>("usp_CountriesSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_CountriesUpdate_Result> usp_CountriesUpdate(Nullable<int> id, string name)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CountriesUpdate_Result>("usp_CountriesUpdate", idParameter, nameParameter);
        }
    
        public virtual int usp_EditorialDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EditorialDelete", idParameter);
        }
    
        public virtual int usp_EditorialExists(string name, string uRL, Nullable<int> countryId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EditorialExists", nameParameter, uRLParameter, countryIdParameter);
        }
    
        public virtual ObjectResult<usp_EditorialInsert_Result> usp_EditorialInsert(string name, string uRL, Nullable<int> countryId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EditorialInsert_Result>("usp_EditorialInsert", nameParameter, uRLParameter, countryIdParameter);
        }
    
        public virtual ObjectResult<usp_EditorialSelect_Result> usp_EditorialSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EditorialSelect_Result>("usp_EditorialSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_EditorialUpdate_Result> usp_EditorialUpdate(Nullable<int> id, string name, string uRL, Nullable<int> countryId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EditorialUpdate_Result>("usp_EditorialUpdate", idParameter, nameParameter, uRLParameter, countryIdParameter);
        }
    
        public virtual int usp_FilesDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_FilesDelete", idParameter);
        }
    
        public virtual ObjectResult<usp_FilesInsert_Result> usp_FilesInsert(string name, string uRL, Nullable<int> genericDocumentId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var genericDocumentIdParameter = genericDocumentId.HasValue ?
                new ObjectParameter("GenericDocumentId", genericDocumentId) :
                new ObjectParameter("GenericDocumentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FilesInsert_Result>("usp_FilesInsert", nameParameter, uRLParameter, genericDocumentIdParameter);
        }
    
        public virtual ObjectResult<usp_FilesInsertUpdate_Result> usp_FilesInsertUpdate(Nullable<int> consecutive, string name, string uRL, Nullable<int> genericDocumentId)
        {
            var consecutiveParameter = consecutive.HasValue ?
                new ObjectParameter("Consecutive", consecutive) :
                new ObjectParameter("Consecutive", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var genericDocumentIdParameter = genericDocumentId.HasValue ?
                new ObjectParameter("GenericDocumentId", genericDocumentId) :
                new ObjectParameter("GenericDocumentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FilesInsertUpdate_Result>("usp_FilesInsertUpdate", consecutiveParameter, nameParameter, uRLParameter, genericDocumentIdParameter);
        }
    
        public virtual ObjectResult<usp_FilesSelect_Result> usp_FilesSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FilesSelect_Result>("usp_FilesSelect", idParameter);
        }
    
        public virtual int usp_FilesUpdate(Nullable<int> id, string name, string uRL, Nullable<int> genericDocumentId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var genericDocumentIdParameter = genericDocumentId.HasValue ?
                new ObjectParameter("GenericDocumentId", genericDocumentId) :
                new ObjectParameter("GenericDocumentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_FilesUpdate", idParameter, nameParameter, uRLParameter, genericDocumentIdParameter);
        }
    
        public virtual int usp_GenericDocumentDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GenericDocumentDelete", idParameter);
        }
    
        public virtual ObjectResult<usp_GenericDocumentInsert_Result> usp_GenericDocumentInsert(Nullable<int> regulationId, Nullable<int> tipsId)
        {
            var regulationIdParameter = regulationId.HasValue ?
                new ObjectParameter("RegulationId", regulationId) :
                new ObjectParameter("RegulationId", typeof(int));
    
            var tipsIdParameter = tipsId.HasValue ?
                new ObjectParameter("TipsId", tipsId) :
                new ObjectParameter("TipsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GenericDocumentInsert_Result>("usp_GenericDocumentInsert", regulationIdParameter, tipsIdParameter);
        }
    
        public virtual ObjectResult<usp_GenericDocumentInsertUpdate_Result> usp_GenericDocumentInsertUpdate(Nullable<int> consecutive, Nullable<int> regulationId, Nullable<int> tipsId, Nullable<System.DateTime> created)
        {
            var consecutiveParameter = consecutive.HasValue ?
                new ObjectParameter("Consecutive", consecutive) :
                new ObjectParameter("Consecutive", typeof(int));
    
            var regulationIdParameter = regulationId.HasValue ?
                new ObjectParameter("RegulationId", regulationId) :
                new ObjectParameter("RegulationId", typeof(int));
    
            var tipsIdParameter = tipsId.HasValue ?
                new ObjectParameter("TipsId", tipsId) :
                new ObjectParameter("TipsId", typeof(int));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GenericDocumentInsertUpdate_Result>("usp_GenericDocumentInsertUpdate", consecutiveParameter, regulationIdParameter, tipsIdParameter, createdParameter);
        }
    
        public virtual ObjectResult<usp_GenericDocumentSelect_Result> usp_GenericDocumentSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GenericDocumentSelect_Result>("usp_GenericDocumentSelect", idParameter);
        }
    
        public virtual int usp_GenericDocumentUpdate(Nullable<int> id, Nullable<int> regulationId, Nullable<int> tipsId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var regulationIdParameter = regulationId.HasValue ?
                new ObjectParameter("RegulationId", regulationId) :
                new ObjectParameter("RegulationId", typeof(int));
    
            var tipsIdParameter = tipsId.HasValue ?
                new ObjectParameter("TipsId", tipsId) :
                new ObjectParameter("TipsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GenericDocumentUpdate", idParameter, regulationIdParameter, tipsIdParameter);
        }
    
        public virtual int usp_InstitutionsDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InstitutionsDelete", idParameter);
        }
    
        public virtual int usp_InstitutionsExist(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InstitutionsExist", nameParameter);
        }
    
        public virtual ObjectResult<usp_InstitutionsGet_Result> usp_InstitutionsGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_InstitutionsGet_Result>("usp_InstitutionsGet");
        }
    
        public virtual ObjectResult<usp_InstitutionsInsert_Result> usp_InstitutionsInsert(string name, Nullable<bool> isUserDefined)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isUserDefinedParameter = isUserDefined.HasValue ?
                new ObjectParameter("IsUserDefined", isUserDefined) :
                new ObjectParameter("IsUserDefined", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_InstitutionsInsert_Result>("usp_InstitutionsInsert", nameParameter, isUserDefinedParameter);
        }
    
        public virtual ObjectResult<usp_InstitutionsSelect_Result> usp_InstitutionsSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_InstitutionsSelect_Result>("usp_InstitutionsSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_InstitutionsUpdate_Result> usp_InstitutionsUpdate(Nullable<int> id, string name, Nullable<bool> isUserDefined)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isUserDefinedParameter = isUserDefined.HasValue ?
                new ObjectParameter("IsUserDefined", isUserDefined) :
                new ObjectParameter("IsUserDefined", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_InstitutionsUpdate_Result>("usp_InstitutionsUpdate", idParameter, nameParameter, isUserDefinedParameter);
        }
    
        public virtual int usp_LanguageKnowledgeDocumentsDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LanguageKnowledgeDocumentsDelete", idParameter);
        }
    
        public virtual int usp_LanguageKnowledgeDocumentsInsert(Nullable<int> genericDocumentId, string language, string certifyingBoyd, Nullable<int> year, string levels)
        {
            var genericDocumentIdParameter = genericDocumentId.HasValue ?
                new ObjectParameter("GenericDocumentId", genericDocumentId) :
                new ObjectParameter("GenericDocumentId", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var certifyingBoydParameter = certifyingBoyd != null ?
                new ObjectParameter("CertifyingBoyd", certifyingBoyd) :
                new ObjectParameter("CertifyingBoyd", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var levelsParameter = levels != null ?
                new ObjectParameter("Levels", levels) :
                new ObjectParameter("Levels", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LanguageKnowledgeDocumentsInsert", genericDocumentIdParameter, languageParameter, certifyingBoydParameter, yearParameter, levelsParameter);
        }
    
        public virtual ObjectResult<usp_LanguageKnowledgeDocumentsSelect_Result> usp_LanguageKnowledgeDocumentsSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LanguageKnowledgeDocumentsSelect_Result>("usp_LanguageKnowledgeDocumentsSelect", idParameter);
        }
    
        public virtual int usp_LanguageKnowledgeDocumentsUpdate(Nullable<int> id, Nullable<int> genericDocumentId, string language, string certifyingBoyd, Nullable<int> year, string levels)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var genericDocumentIdParameter = genericDocumentId.HasValue ?
                new ObjectParameter("GenericDocumentId", genericDocumentId) :
                new ObjectParameter("GenericDocumentId", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var certifyingBoydParameter = certifyingBoyd != null ?
                new ObjectParameter("CertifyingBoyd", certifyingBoyd) :
                new ObjectParameter("CertifyingBoyd", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var levelsParameter = levels != null ?
                new ObjectParameter("Levels", levels) :
                new ObjectParameter("Levels", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LanguageKnowledgeDocumentsUpdate", idParameter, genericDocumentIdParameter, languageParameter, certifyingBoydParameter, yearParameter, levelsParameter);
        }
    
        public virtual int usp_LanguageKnowledgeLevelsDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LanguageKnowledgeLevelsDelete", idParameter);
        }
    
        public virtual ObjectResult<usp_LanguageKnowledgeLevelsInsert_Result> usp_LanguageKnowledgeLevelsInsert(string name, Nullable<bool> isUserDefined, Nullable<int> languageId, string score)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isUserDefinedParameter = isUserDefined.HasValue ?
                new ObjectParameter("IsUserDefined", isUserDefined) :
                new ObjectParameter("IsUserDefined", typeof(bool));
    
            var languageIdParameter = languageId.HasValue ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(int));
    
            var scoreParameter = score != null ?
                new ObjectParameter("Score", score) :
                new ObjectParameter("Score", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LanguageKnowledgeLevelsInsert_Result>("usp_LanguageKnowledgeLevelsInsert", nameParameter, isUserDefinedParameter, languageIdParameter, scoreParameter);
        }
    
        public virtual ObjectResult<usp_LanguageKnowledgeLevelsSelect_Result> usp_LanguageKnowledgeLevelsSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LanguageKnowledgeLevelsSelect_Result>("usp_LanguageKnowledgeLevelsSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_LanguageKnowledgeLevelsUpdate_Result> usp_LanguageKnowledgeLevelsUpdate(Nullable<int> id, string name, Nullable<bool> isUserDefined)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isUserDefinedParameter = isUserDefined.HasValue ?
                new ObjectParameter("IsUserDefined", isUserDefined) :
                new ObjectParameter("IsUserDefined", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LanguageKnowledgeLevelsUpdate_Result>("usp_LanguageKnowledgeLevelsUpdate", idParameter, nameParameter, isUserDefinedParameter);
        }
    
        public virtual int usp_LanguagesDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LanguagesDelete", idParameter);
        }
    
        public virtual int usp_LanguagesExists(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LanguagesExists", nameParameter);
        }
    
        public virtual ObjectResult<usp_LanguagesGet_Result> usp_LanguagesGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LanguagesGet_Result>("usp_LanguagesGet");
        }
    
        public virtual ObjectResult<usp_LanguagesInsert_Result> usp_LanguagesInsert(string name, Nullable<bool> isUserDefined)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isUserDefinedParameter = isUserDefined.HasValue ?
                new ObjectParameter("IsUserDefined", isUserDefined) :
                new ObjectParameter("IsUserDefined", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LanguagesInsert_Result>("usp_LanguagesInsert", nameParameter, isUserDefinedParameter);
        }
    
        public virtual ObjectResult<usp_LanguagesSelect_Result> usp_LanguagesSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LanguagesSelect_Result>("usp_LanguagesSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_LanguagesUpdate_Result> usp_LanguagesUpdate(Nullable<int> id, string name, Nullable<bool> isUserDefined)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isUserDefinedParameter = isUserDefined.HasValue ?
                new ObjectParameter("IsUserDefined", isUserDefined) :
                new ObjectParameter("IsUserDefined", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LanguagesUpdate_Result>("usp_LanguagesUpdate", idParameter, nameParameter, isUserDefinedParameter);
        }
    
        public virtual int usp_MagazineExists(string name, string uRL)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MagazineExists", nameParameter, uRLParameter);
        }
    
        public virtual int usp_MagazinesArticlesDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MagazinesArticlesDelete", idParameter);
        }
    
        public virtual int usp_MagazinesArticlesInsert(Nullable<int> genericDocumentId, string articleName, string magazineName, string magazineURL, Nullable<System.DateTime> publicationDate, string publicationUrl, string authors)
        {
            var genericDocumentIdParameter = genericDocumentId.HasValue ?
                new ObjectParameter("GenericDocumentId", genericDocumentId) :
                new ObjectParameter("GenericDocumentId", typeof(int));
    
            var articleNameParameter = articleName != null ?
                new ObjectParameter("ArticleName", articleName) :
                new ObjectParameter("ArticleName", typeof(string));
    
            var magazineNameParameter = magazineName != null ?
                new ObjectParameter("MagazineName", magazineName) :
                new ObjectParameter("MagazineName", typeof(string));
    
            var magazineURLParameter = magazineURL != null ?
                new ObjectParameter("MagazineURL", magazineURL) :
                new ObjectParameter("MagazineURL", typeof(string));
    
            var publicationDateParameter = publicationDate.HasValue ?
                new ObjectParameter("PublicationDate", publicationDate) :
                new ObjectParameter("PublicationDate", typeof(System.DateTime));
    
            var publicationUrlParameter = publicationUrl != null ?
                new ObjectParameter("PublicationUrl", publicationUrl) :
                new ObjectParameter("PublicationUrl", typeof(string));
    
            var authorsParameter = authors != null ?
                new ObjectParameter("Authors", authors) :
                new ObjectParameter("Authors", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MagazinesArticlesInsert", genericDocumentIdParameter, articleNameParameter, magazineNameParameter, magazineURLParameter, publicationDateParameter, publicationUrlParameter, authorsParameter);
        }
    
        public virtual ObjectResult<usp_MagazinesArticlesSelect_Result> usp_MagazinesArticlesSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MagazinesArticlesSelect_Result>("usp_MagazinesArticlesSelect", idParameter);
        }
    
        public virtual int usp_MagazinesArticlesUpdate(Nullable<int> id, Nullable<int> genericDocumentId, string articleName, string magazineName, string magazineURL, Nullable<System.DateTime> publicationDate, string publicationUrl, string authors)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var genericDocumentIdParameter = genericDocumentId.HasValue ?
                new ObjectParameter("GenericDocumentId", genericDocumentId) :
                new ObjectParameter("GenericDocumentId", typeof(int));
    
            var articleNameParameter = articleName != null ?
                new ObjectParameter("ArticleName", articleName) :
                new ObjectParameter("ArticleName", typeof(string));
    
            var magazineNameParameter = magazineName != null ?
                new ObjectParameter("MagazineName", magazineName) :
                new ObjectParameter("MagazineName", typeof(string));
    
            var magazineURLParameter = magazineURL != null ?
                new ObjectParameter("MagazineURL", magazineURL) :
                new ObjectParameter("MagazineURL", typeof(string));
    
            var publicationDateParameter = publicationDate.HasValue ?
                new ObjectParameter("PublicationDate", publicationDate) :
                new ObjectParameter("PublicationDate", typeof(System.DateTime));
    
            var publicationUrlParameter = publicationUrl != null ?
                new ObjectParameter("PublicationUrl", publicationUrl) :
                new ObjectParameter("PublicationUrl", typeof(string));
    
            var authorsParameter = authors != null ?
                new ObjectParameter("Authors", authors) :
                new ObjectParameter("Authors", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MagazinesArticlesUpdate", idParameter, genericDocumentIdParameter, articleNameParameter, magazineNameParameter, magazineURLParameter, publicationDateParameter, publicationUrlParameter, authorsParameter);
        }
    
        public virtual ObjectResult<string> usp_MagazinesAuthorsByArticle(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_MagazinesAuthorsByArticle", idParameter);
        }
    
        public virtual int usp_MagazinesDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MagazinesDelete", idParameter);
        }
    
        public virtual ObjectResult<usp_MagazinesInsert_Result> usp_MagazinesInsert(string name, string uRL)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MagazinesInsert_Result>("usp_MagazinesInsert", nameParameter, uRLParameter);
        }
    
        public virtual ObjectResult<usp_MagazinesSelect_Result> usp_MagazinesSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MagazinesSelect_Result>("usp_MagazinesSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_MagazinesUpdate_Result> usp_MagazinesUpdate(Nullable<int> id, string name, string uRL)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MagazinesUpdate_Result>("usp_MagazinesUpdate", idParameter, nameParameter, uRLParameter);
        }
    
        public virtual int usp_PresentationsDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PresentationsDelete", idParameter);
        }
    
        public virtual ObjectResult<usp_PresentationsInsert_Result> usp_PresentationsInsert(Nullable<int> genericDocumentId, Nullable<System.DateTime> eventDate, string place, string name, string @event)
        {
            var genericDocumentIdParameter = genericDocumentId.HasValue ?
                new ObjectParameter("GenericDocumentId", genericDocumentId) :
                new ObjectParameter("GenericDocumentId", typeof(int));
    
            var eventDateParameter = eventDate.HasValue ?
                new ObjectParameter("EventDate", eventDate) :
                new ObjectParameter("EventDate", typeof(System.DateTime));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var eventParameter = @event != null ?
                new ObjectParameter("Event", @event) :
                new ObjectParameter("Event", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PresentationsInsert_Result>("usp_PresentationsInsert", genericDocumentIdParameter, eventDateParameter, placeParameter, nameParameter, eventParameter);
        }
    
        public virtual ObjectResult<usp_PresentationsSelect_Result> usp_PresentationsSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PresentationsSelect_Result>("usp_PresentationsSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_PresentationsUpdate_Result> usp_PresentationsUpdate(Nullable<int> id, Nullable<int> genericDocumentId, Nullable<System.DateTime> eventDate, string place, string name, string @event)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var genericDocumentIdParameter = genericDocumentId.HasValue ?
                new ObjectParameter("GenericDocumentId", genericDocumentId) :
                new ObjectParameter("GenericDocumentId", typeof(int));
    
            var eventDateParameter = eventDate.HasValue ?
                new ObjectParameter("EventDate", eventDate) :
                new ObjectParameter("EventDate", typeof(System.DateTime));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var eventParameter = @event != null ?
                new ObjectParameter("Event", @event) :
                new ObjectParameter("Event", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PresentationsUpdate_Result>("usp_PresentationsUpdate", idParameter, genericDocumentIdParameter, eventDateParameter, placeParameter, nameParameter, eventParameter);
        }
    
        public virtual int usp_RegulationsDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RegulationsDelete", idParameter);
        }
    
        public virtual ObjectResult<usp_RegulationsInsert_Result> usp_RegulationsInsert(string name, string content)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RegulationsInsert_Result>("usp_RegulationsInsert", nameParameter, contentParameter);
        }
    
        public virtual ObjectResult<usp_RegulationsInsertUpdate_Result> usp_RegulationsInsertUpdate(Nullable<int> consecutive, string name, string content, Nullable<System.DateTime> created)
        {
            var consecutiveParameter = consecutive.HasValue ?
                new ObjectParameter("Consecutive", consecutive) :
                new ObjectParameter("Consecutive", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RegulationsInsertUpdate_Result>("usp_RegulationsInsertUpdate", consecutiveParameter, nameParameter, contentParameter, createdParameter);
        }
    
        public virtual ObjectResult<usp_RegulationsSelect_Result> usp_RegulationsSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RegulationsSelect_Result>("usp_RegulationsSelect", idParameter);
        }
    
        public virtual int usp_RegulationsUpdate(Nullable<int> id, string name, string content)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RegulationsUpdate", idParameter, nameParameter, contentParameter);
        }
    
        public virtual int usp_ResearchProjectDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ResearchProjectDelete", idParameter);
        }
    
        public virtual ObjectResult<usp_ResearchProjectInsert_Result> usp_ResearchProjectInsert(Nullable<int> genericDocumentId, Nullable<int> projectCode, string projectName, Nullable<int> projectStartYear, Nullable<int> projectEndYear, Nullable<bool> isValited)
        {
            var genericDocumentIdParameter = genericDocumentId.HasValue ?
                new ObjectParameter("GenericDocumentId", genericDocumentId) :
                new ObjectParameter("GenericDocumentId", typeof(int));
    
            var projectCodeParameter = projectCode.HasValue ?
                new ObjectParameter("ProjectCode", projectCode) :
                new ObjectParameter("ProjectCode", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var projectStartYearParameter = projectStartYear.HasValue ?
                new ObjectParameter("ProjectStartYear", projectStartYear) :
                new ObjectParameter("ProjectStartYear", typeof(int));
    
            var projectEndYearParameter = projectEndYear.HasValue ?
                new ObjectParameter("ProjectEndYear", projectEndYear) :
                new ObjectParameter("ProjectEndYear", typeof(int));
    
            var isValitedParameter = isValited.HasValue ?
                new ObjectParameter("IsValited", isValited) :
                new ObjectParameter("IsValited", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ResearchProjectInsert_Result>("usp_ResearchProjectInsert", genericDocumentIdParameter, projectCodeParameter, projectNameParameter, projectStartYearParameter, projectEndYearParameter, isValitedParameter);
        }
    
        public virtual ObjectResult<usp_ResearchProjectSelect_Result> usp_ResearchProjectSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ResearchProjectSelect_Result>("usp_ResearchProjectSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_ResearchProjectUpdate_Result> usp_ResearchProjectUpdate(Nullable<int> id, Nullable<int> genericDocumentId, Nullable<int> projectCode, string projectName, Nullable<int> projectStartYear, Nullable<int> projectEndYear, Nullable<bool> isValited)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var genericDocumentIdParameter = genericDocumentId.HasValue ?
                new ObjectParameter("GenericDocumentId", genericDocumentId) :
                new ObjectParameter("GenericDocumentId", typeof(int));
    
            var projectCodeParameter = projectCode.HasValue ?
                new ObjectParameter("ProjectCode", projectCode) :
                new ObjectParameter("ProjectCode", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var projectStartYearParameter = projectStartYear.HasValue ?
                new ObjectParameter("ProjectStartYear", projectStartYear) :
                new ObjectParameter("ProjectStartYear", typeof(int));
    
            var projectEndYearParameter = projectEndYear.HasValue ?
                new ObjectParameter("ProjectEndYear", projectEndYear) :
                new ObjectParameter("ProjectEndYear", typeof(int));
    
            var isValitedParameter = isValited.HasValue ?
                new ObjectParameter("IsValited", isValited) :
                new ObjectParameter("IsValited", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ResearchProjectUpdate_Result>("usp_ResearchProjectUpdate", idParameter, genericDocumentIdParameter, projectCodeParameter, projectNameParameter, projectStartYearParameter, projectEndYearParameter, isValitedParameter);
        }
    
        public virtual int usp_TipsDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TipsDelete", idParameter);
        }
    
        public virtual ObjectResult<usp_TipsInsert_Result> usp_TipsInsert(string name, string content)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TipsInsert_Result>("usp_TipsInsert", nameParameter, contentParameter);
        }
    
        public virtual ObjectResult<usp_TipsInsertUpdate_Result> usp_TipsInsertUpdate(Nullable<int> consecutive, string name, string content, Nullable<System.DateTime> created)
        {
            var consecutiveParameter = consecutive.HasValue ?
                new ObjectParameter("Consecutive", consecutive) :
                new ObjectParameter("Consecutive", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TipsInsertUpdate_Result>("usp_TipsInsertUpdate", consecutiveParameter, nameParameter, contentParameter, createdParameter);
        }
    
        public virtual ObjectResult<usp_TipsSelect_Result> usp_TipsSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TipsSelect_Result>("usp_TipsSelect", idParameter);
        }
    
        public virtual int usp_TipsUpdate(Nullable<int> id, string name, string content)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TipsUpdate", idParameter, nameParameter, contentParameter);
        }
    
        public virtual int usp_TrainingDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TrainingDelete", idParameter);
        }
    
        public virtual int usp_TrainingEntitiesDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TrainingEntitiesDelete", idParameter);
        }
    
        public virtual int usp_TrainingEntitiesExists(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TrainingEntitiesExists", nameParameter);
        }
    
        public virtual ObjectResult<usp_TrainingEntitiesGet_Result> usp_TrainingEntitiesGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TrainingEntitiesGet_Result>("usp_TrainingEntitiesGet");
        }
    
        public virtual ObjectResult<usp_TrainingEntitiesInsert_Result> usp_TrainingEntitiesInsert(string name, Nullable<bool> isUserDefined)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isUserDefinedParameter = isUserDefined.HasValue ?
                new ObjectParameter("IsUserDefined", isUserDefined) :
                new ObjectParameter("IsUserDefined", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TrainingEntitiesInsert_Result>("usp_TrainingEntitiesInsert", nameParameter, isUserDefinedParameter);
        }
    
        public virtual ObjectResult<usp_TrainingEntitiesSelect_Result> usp_TrainingEntitiesSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TrainingEntitiesSelect_Result>("usp_TrainingEntitiesSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_TrainingEntitiesUpdate_Result> usp_TrainingEntitiesUpdate(Nullable<int> id, string name, Nullable<bool> isUserDefined)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isUserDefinedParameter = isUserDefined.HasValue ?
                new ObjectParameter("IsUserDefined", isUserDefined) :
                new ObjectParameter("IsUserDefined", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TrainingEntitiesUpdate_Result>("usp_TrainingEntitiesUpdate", idParameter, nameParameter, isUserDefinedParameter);
        }
    
        public virtual int usp_TrainingInsert(Nullable<int> genericDocumentId, string name, Nullable<System.DateTime> trainingStarDate, Nullable<System.DateTime> trainingEndDate, Nullable<int> trainingHours, string trainingEntity)
        {
            var genericDocumentIdParameter = genericDocumentId.HasValue ?
                new ObjectParameter("GenericDocumentId", genericDocumentId) :
                new ObjectParameter("GenericDocumentId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var trainingStarDateParameter = trainingStarDate.HasValue ?
                new ObjectParameter("TrainingStarDate", trainingStarDate) :
                new ObjectParameter("TrainingStarDate", typeof(System.DateTime));
    
            var trainingEndDateParameter = trainingEndDate.HasValue ?
                new ObjectParameter("TrainingEndDate", trainingEndDate) :
                new ObjectParameter("TrainingEndDate", typeof(System.DateTime));
    
            var trainingHoursParameter = trainingHours.HasValue ?
                new ObjectParameter("TrainingHours", trainingHours) :
                new ObjectParameter("TrainingHours", typeof(int));
    
            var trainingEntityParameter = trainingEntity != null ?
                new ObjectParameter("TrainingEntity", trainingEntity) :
                new ObjectParameter("TrainingEntity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TrainingInsert", genericDocumentIdParameter, nameParameter, trainingStarDateParameter, trainingEndDateParameter, trainingHoursParameter, trainingEntityParameter);
        }
    
        public virtual ObjectResult<usp_TrainingSelect_Result> usp_TrainingSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TrainingSelect_Result>("usp_TrainingSelect", idParameter);
        }
    
        public virtual int usp_TrainingUpdate(Nullable<int> id, Nullable<int> genericDocumentId, string name, Nullable<System.DateTime> trainingStarDate, Nullable<System.DateTime> trainingEndDate, Nullable<int> trainingHours, string trainingEntity)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var genericDocumentIdParameter = genericDocumentId.HasValue ?
                new ObjectParameter("GenericDocumentId", genericDocumentId) :
                new ObjectParameter("GenericDocumentId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var trainingStarDateParameter = trainingStarDate.HasValue ?
                new ObjectParameter("TrainingStarDate", trainingStarDate) :
                new ObjectParameter("TrainingStarDate", typeof(System.DateTime));
    
            var trainingEndDateParameter = trainingEndDate.HasValue ?
                new ObjectParameter("TrainingEndDate", trainingEndDate) :
                new ObjectParameter("TrainingEndDate", typeof(System.DateTime));
    
            var trainingHoursParameter = trainingHours.HasValue ?
                new ObjectParameter("TrainingHours", trainingHours) :
                new ObjectParameter("TrainingHours", typeof(int));
    
            var trainingEntityParameter = trainingEntity != null ?
                new ObjectParameter("TrainingEntity", trainingEntity) :
                new ObjectParameter("TrainingEntity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TrainingUpdate", idParameter, genericDocumentIdParameter, nameParameter, trainingStarDateParameter, trainingEndDateParameter, trainingHoursParameter, trainingEntityParameter);
        }
    }
}
